{"ast":null,"code":"import { ResizeObserver } from '@juggle/resize-observer';\nimport useLayoutEffect from '@react-hook/passive-layout-effect';\nimport useLatest from '@react-hook/latest';\nimport rafSchd from 'raf-schd';\n/**\n * A React hook that fires a callback whenever ResizeObserver detects a change to its size\n *\n * @param target A React ref created by `useRef()` or an HTML element\n * @param callback Invoked with a single `ResizeObserverEntry` any time\n *   the `target` resizes\n */\n\nfunction useResizeObserver(target, callback) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = useLatest(callback);\n  useLayoutEffect(() => {\n    let didUnsubscribe = false;\n    const targetEl = target && 'current' in target ? target.current : target;\n    if (!targetEl) return;\n    resizeObserver.subscribe(targetEl, (entry, observer) => {\n      if (didUnsubscribe) return;\n      storedCallback.current(entry, observer);\n    });\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver.unsubscribe(targetEl);\n    };\n  }, [target, resizeObserver, storedCallback]);\n  return resizeObserver.observer;\n}\n\nfunction createResizeObserver() {\n  const callbacks = new Map();\n  const observer = new ResizeObserver(rafSchd((entries, observer) => {\n    if (entries.length === 1) {\n      var _callbacks$get;\n\n      (_callbacks$get = callbacks.get(entries[0].target)) === null || _callbacks$get === void 0 ? void 0 : _callbacks$get(entries[0], observer);\n    } else {\n      for (let i = 0; i < entries.length; i++) {\n        var _callbacks$get2;\n\n        (_callbacks$get2 = callbacks.get(entries[i].target)) === null || _callbacks$get2 === void 0 ? void 0 : _callbacks$get2(entries[i], observer);\n      }\n    }\n  }));\n  return {\n    observer,\n\n    subscribe(target, callback) {\n      observer.observe(target);\n      callbacks.set(target, callback);\n    },\n\n    unsubscribe(target) {\n      observer.unobserve(target);\n      callbacks.delete(target);\n    }\n\n  };\n}\n\nlet _resizeObserver;\n\nconst getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\n\nexport default useResizeObserver;","map":{"version":3,"sources":["C:/Users/Grant/Desktop/Intelli-Farm-new/intelli-farm/node_modules/@react-hook/resize-observer/dist/module/index.js"],"names":["ResizeObserver","useLayoutEffect","useLatest","rafSchd","useResizeObserver","target","callback","resizeObserver","getResizeObserver","storedCallback","didUnsubscribe","targetEl","current","subscribe","entry","observer","unsubscribe","createResizeObserver","callbacks","Map","entries","length","_callbacks$get","get","i","_callbacks$get2","observe","set","unobserve","delete","_resizeObserver"],"mappings":"AAAA,SAASA,cAAT,QAA+B,yBAA/B;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;AAC3C,QAAMC,cAAc,GAAGC,iBAAiB,EAAxC;AACA,QAAMC,cAAc,GAAGP,SAAS,CAACI,QAAD,CAAhC;AACAL,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIS,cAAc,GAAG,KAArB;AACA,UAAMC,QAAQ,GAAGN,MAAM,IAAI,aAAaA,MAAvB,GAAgCA,MAAM,CAACO,OAAvC,GAAiDP,MAAlE;AACA,QAAI,CAACM,QAAL,EAAe;AACfJ,IAAAA,cAAc,CAACM,SAAf,CAAyBF,QAAzB,EAAmC,CAACG,KAAD,EAAQC,QAAR,KAAqB;AACtD,UAAIL,cAAJ,EAAoB;AACpBD,MAAAA,cAAc,CAACG,OAAf,CAAuBE,KAAvB,EAA8BC,QAA9B;AACD,KAHD;AAIA,WAAO,MAAM;AACXL,MAAAA,cAAc,GAAG,IAAjB;AACAH,MAAAA,cAAc,CAACS,WAAf,CAA2BL,QAA3B;AACD,KAHD;AAID,GAZc,EAYZ,CAACN,MAAD,EAASE,cAAT,EAAyBE,cAAzB,CAZY,CAAf;AAaA,SAAOF,cAAc,CAACQ,QAAtB;AACD;;AAED,SAASE,oBAAT,GAAgC;AAC9B,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACA,QAAMJ,QAAQ,GAAG,IAAIf,cAAJ,CAAmBG,OAAO,CAAC,CAACiB,OAAD,EAAUL,QAAV,KAAuB;AACjE,QAAIK,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAIC,cAAJ;;AAEA,OAACA,cAAc,GAAGJ,SAAS,CAACK,GAAV,CAAcH,OAAO,CAAC,CAAD,CAAP,CAAWf,MAAzB,CAAlB,MAAwD,IAAxD,IAAgEiB,cAAc,KAAK,KAAK,CAAxF,GAA4F,KAAK,CAAjG,GAAqGA,cAAc,CAACF,OAAO,CAAC,CAAD,CAAR,EAAaL,QAAb,CAAnH;AACD,KAJD,MAIO;AACL,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACC,MAA5B,EAAoCG,CAAC,EAArC,EAAyC;AACvC,YAAIC,eAAJ;;AAEA,SAACA,eAAe,GAAGP,SAAS,CAACK,GAAV,CAAcH,OAAO,CAACI,CAAD,CAAP,CAAWnB,MAAzB,CAAnB,MAAyD,IAAzD,IAAiEoB,eAAe,KAAK,KAAK,CAA1F,GAA8F,KAAK,CAAnG,GAAuGA,eAAe,CAACL,OAAO,CAACI,CAAD,CAAR,EAAaT,QAAb,CAAtH;AACD;AACF;AACF,GAZ0C,CAA1B,CAAjB;AAaA,SAAO;AACLA,IAAAA,QADK;;AAGLF,IAAAA,SAAS,CAACR,MAAD,EAASC,QAAT,EAAmB;AAC1BS,MAAAA,QAAQ,CAACW,OAAT,CAAiBrB,MAAjB;AACAa,MAAAA,SAAS,CAACS,GAAV,CAActB,MAAd,EAAsBC,QAAtB;AACD,KANI;;AAQLU,IAAAA,WAAW,CAACX,MAAD,EAAS;AAClBU,MAAAA,QAAQ,CAACa,SAAT,CAAmBvB,MAAnB;AACAa,MAAAA,SAAS,CAACW,MAAV,CAAiBxB,MAAjB;AACD;;AAXI,GAAP;AAcD;;AAED,IAAIyB,eAAJ;;AAEA,MAAMtB,iBAAiB,GAAG,MAAM,CAACsB,eAAD,GAAmBA,eAAe,GAAGb,oBAAoB,EAAzD,GAA8Da,eAA9F;;AAEA,eAAe1B,iBAAf","sourcesContent":["import { ResizeObserver } from '@juggle/resize-observer';\nimport useLayoutEffect from '@react-hook/passive-layout-effect';\nimport useLatest from '@react-hook/latest';\nimport rafSchd from 'raf-schd';\n/**\n * A React hook that fires a callback whenever ResizeObserver detects a change to its size\n *\n * @param target A React ref created by `useRef()` or an HTML element\n * @param callback Invoked with a single `ResizeObserverEntry` any time\n *   the `target` resizes\n */\n\nfunction useResizeObserver(target, callback) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = useLatest(callback);\n  useLayoutEffect(() => {\n    let didUnsubscribe = false;\n    const targetEl = target && 'current' in target ? target.current : target;\n    if (!targetEl) return;\n    resizeObserver.subscribe(targetEl, (entry, observer) => {\n      if (didUnsubscribe) return;\n      storedCallback.current(entry, observer);\n    });\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver.unsubscribe(targetEl);\n    };\n  }, [target, resizeObserver, storedCallback]);\n  return resizeObserver.observer;\n}\n\nfunction createResizeObserver() {\n  const callbacks = new Map();\n  const observer = new ResizeObserver(rafSchd((entries, observer) => {\n    if (entries.length === 1) {\n      var _callbacks$get;\n\n      (_callbacks$get = callbacks.get(entries[0].target)) === null || _callbacks$get === void 0 ? void 0 : _callbacks$get(entries[0], observer);\n    } else {\n      for (let i = 0; i < entries.length; i++) {\n        var _callbacks$get2;\n\n        (_callbacks$get2 = callbacks.get(entries[i].target)) === null || _callbacks$get2 === void 0 ? void 0 : _callbacks$get2(entries[i], observer);\n      }\n    }\n  }));\n  return {\n    observer,\n\n    subscribe(target, callback) {\n      observer.observe(target);\n      callbacks.set(target, callback);\n    },\n\n    unsubscribe(target) {\n      observer.unobserve(target);\n      callbacks.delete(target);\n    }\n\n  };\n}\n\nlet _resizeObserver;\n\nconst getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\n\nexport default useResizeObserver;"]},"metadata":{},"sourceType":"module"}