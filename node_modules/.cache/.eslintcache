[{"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\index.js":"1","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\ScrollToTop.js":"2","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\HomePage.js":"3","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Preloader.js":"4","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\routes.js":"5","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Sidebar.js":"6","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Navbar.js":"7","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Footer.js":"8","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\api.js":"9","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\IrrigationControl.js":"10","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Fertilizer.js":"11","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Dashboard.js":"12","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Settings.js":"13","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Notifications.js":"14","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\dashboard\\DashboardOverview.js":"15","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\IrrigationSchedule.js":"16","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Pumps.js":"17","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Backwash.js":"18","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\AppName.js":"19","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\BrushChart.js":"20","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\AxiosSpinner.js":"21","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\HomeFlowFertilizerBarChart.js":"22","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\FertilizerBarChart.js":"23","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Login.js":"24","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\LineChart.js":"25"},{"size":535,"mtime":1628144348386,"results":"26","hashOfConfig":"27"},{"size":442,"mtime":1628144348383,"results":"28","hashOfConfig":"27"},{"size":4081,"mtime":1628144348387,"results":"29","hashOfConfig":"27"},{"size":426,"mtime":1628144348383,"results":"30","hashOfConfig":"27"},{"size":112,"mtime":1628144348418,"results":"31","hashOfConfig":"27"},{"size":6187,"mtime":1628172597377,"results":"32","hashOfConfig":"27"},{"size":86,"mtime":1628144348382,"results":"33","hashOfConfig":"27"},{"size":127,"mtime":1628144348369,"results":"34","hashOfConfig":"27"},{"size":68,"mtime":1628144348364,"results":"35","hashOfConfig":"27"},{"size":3645,"mtime":1628252818183,"results":"36","hashOfConfig":"27"},{"size":4696,"mtime":1628252615915,"results":"37","hashOfConfig":"27"},{"size":5759,"mtime":1628239599950,"results":"38","hashOfConfig":"27"},{"size":466,"mtime":1628157978215,"results":"39","hashOfConfig":"27"},{"size":475,"mtime":1628157995791,"results":"40","hashOfConfig":"27"},{"size":213,"mtime":1628154370281,"results":"41","hashOfConfig":"27"},{"size":8348,"mtime":1628171883396,"results":"42","hashOfConfig":"27"},{"size":1165,"mtime":1628234913527,"results":"43","hashOfConfig":"27"},{"size":2937,"mtime":1628240175965,"results":"44","hashOfConfig":"27"},{"size":965,"mtime":1628154346690,"results":"45","hashOfConfig":"27"},{"size":3876,"mtime":1628144348368,"results":"46","hashOfConfig":"27"},{"size":714,"mtime":1628144348367,"results":"47","hashOfConfig":"27"},{"size":2123,"mtime":1628154335326,"results":"48","hashOfConfig":"27"},{"size":2108,"mtime":1628167404304,"results":"49","hashOfConfig":"27"},{"size":441,"mtime":1628172382889,"results":"50","hashOfConfig":"27"},{"size":1941,"mtime":1628253854341,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1hiwdwe",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\index.js",[],["109","110"],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\ScrollToTop.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\HomePage.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Preloader.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\routes.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Sidebar.js",["111"],"\r\nimport React, { useState } from \"react\";\r\nimport SimpleBar from 'simplebar-react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLeaf } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Nav, Badge, Image, Button, Accordion, Navbar } from '@themesberg/react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Routes } from \"../routes\";\r\nimport {Login} from './Login';\r\n\r\nconst Sidebar = (props = {}) => {\r\n  const { title, items } = props;\r\n  const location = useLocation();\r\n  const { pathname } = location;\r\n  const [show, setShow] = useState(false);\r\n  const showClass = show ? \"show\" : \"\";\r\n  const onCollapse = () => setShow(!show);\r\n  const CollapsableNavItem = (props) => {\r\n    const { eventKey, title, icon, children = null } = props;\r\n    const defaultKey = pathname.indexOf(eventKey) !== -1 ? eventKey : \"\";\r\n\r\n    return (\r\n      <Accordion as={Nav.Item} defaultActiveKey={defaultKey}>\r\n        <Accordion.Item className=\"border-0 bg-blue-500\" eventKey={eventKey}>\r\n          <Accordion.Button as={Nav.Link} className=\"d-flex justify-content-between align-items-center bg-red-900\">\r\n            <span>\r\n              <span className=\"sidebar-icon\"><FontAwesomeIcon icon={icon} /> </span>\r\n              <span className=\"sidebar-text\">{title}</span>\r\n            </span>\r\n          </Accordion.Button>\r\n          <Accordion.Body className=\"multi-level\">\r\n            <Nav className=\"flex-column\">\r\n              {children}\r\n            </Nav>\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n      </Accordion>\r\n    );\r\n  };\r\n\r\n  const NavItem = (props) => {\r\n    const { title, link, external, target, icon, image, badgeText, badgeBg = \"secondary\", badgeColor = \"primary\" } = props;\r\n    const classNames = badgeText ? \"d-flex justify-content-start align-items-center justify-content-between\" : \"\";\r\n    const navItemClassName = link === pathname ? \"active\" : \"\";\r\n    const linkProps = external ? { href: link } : { as: Link, to: link };\r\n\r\n    return (\r\n      <Nav.Item className={navItemClassName} onClick={() => setShow(false)}>\r\n        <Nav.Link {...linkProps} target={target} className={classNames}>\r\n          <span>\r\n            {icon ? <span className=\"sidebar-icon\"><FontAwesomeIcon icon={icon} /> </span> : null}\r\n            {image ? <Image src={image} width={100} height={20} className=\"sidebar-icon svg-icon\" /> : null}\r\n            <span className=\"sidebar-text\">{title}</span>\r\n          </span>\r\n          {badgeText ? (\r\n            <Badge pill bg={badgeBg} text={badgeColor} className=\"badge-md notification-count ms-2\">{badgeText}</Badge>\r\n          ) : null}\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n    );\r\n  };\r\n\r\n  const toNavItem = (item, i) => {\r\n    switch(item.action.type) {\r\n      case \"link\":\r\n        return <NavItem key={i} title={item.title} link={item.action.path} image={item.image}/>\r\n      case \"accordion\":\r\n        return (\r\n          <CollapsableNavItem key={i} title={item.title} eventKey={item.title} image={item.image}>\r\n          { item.action.items.map(toNavItem) }\r\n          </CollapsableNavItem>\r\n        );\r\n      default:\r\n        throw Error(\"impossible\");\r\n    }\r\n  };\r\n  const navItems = items.map(toNavItem);\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        expand={false}\r\n        collapseOnSelect\r\n        variant=\"dark\"\r\n        className=\"navbar-theme-primary px-4 d-md-none mt-5\"\r\n        style={{\r\n          backgroundColor: \"#1e96ff\",\r\n          borderBottom: \"1px 1px solid #1e96ff\",\r\n          borderRadius:\"0.2cm\",\r\n          display:\"flex\",\r\n          width:\"100%\"\r\n        }}\r\n      >\r\n        <Navbar.Brand\r\n          className=\"me-lg-5\"\r\n          as={Link}\r\n          to={Routes.DashboardOverview.path}\r\n        ></Navbar.Brand>\r\n        <Navbar.Toggle\r\n          as={Button}\r\n          aria-controls=\"main-navbar\"\r\n          onClick={onCollapse}\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </Navbar.Toggle>\r\n      </Navbar>\r\n      <CSSTransition timeout={300} in={show} classNames=\"sidebar-transition\">\r\n        <SimpleBar\r\n          {\r\n            ...{} /* style={{ width: \"420px\" }} */\r\n          }\r\n          className={`collapse ${showClass} sidebar d-md-block bg-primary text-white`}\r\n        >\r\n          <div className=\"sidebar-inner px-4 pt-3\">\r\n            <div className=\"user-card d-flex d-md-none align-items-center justify-content-between justify-content-md-center pb-4\">\r\n              <Nav.Link\r\n                className=\"collapse-close d-md-none\"\r\n                onClick={onCollapse}\r\n              ></Nav.Link>\r\n            </div>\r\n            <Nav className=\"flex-column pt-3 pt-md-0\">\r\n              <div className=\"2xl:mt-16\"></div>\r\n              <Button\r\n                className=\"border-1 border-white\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignContent: \"center\",\r\n                  backgroundColor: \"#1e96ff\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  fontSize: \"2.5rem\",\r\n                  fontWeight: \"bold\",\r\n                  fontFamily: \"'Noto Sans JP', sans-serif\",\r\n                  gap: \"0.5rem\",\r\n                  padding: \"0.5rem\",\r\n                  marginBottom: \"2.5rem\",\r\n                }}\r\n              >\r\n                <FontAwesomeIcon style={{ padding: \"0.5rem\" }} icon={faLeaf} />\r\n                {title}\r\n              </Button>\r\n                <div style={{ fontFamily: \"Times New Roman\" }}>{navItems}</div>\r\n              <Button\r\n                className=\"border-1 border-white\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  alignContent: \"center\",\r\n                  justifyContent: \"center\",\r\n                  marginTop: \"1rem\",\r\n                  backgroundColor: \"#1e96ff\",\r\n                }}\r\n              >Logout\r\n              </Button>\r\n            </Nav>\r\n          </div>\r\n        </SimpleBar>\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n};\r\nexport default Sidebar;","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Navbar.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Footer.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\api.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\IrrigationControl.js",["112","113"],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Fertilizer.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Dashboard.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Settings.js",["114"],"import React from \"react\";\r\nimport {AppName} from \"./AppName\";\r\nimport ErrorPage from \"./ErrorPage.jpg\";\r\nimport ErrorGif from \"./ErrorGif.gif\";\r\nexport const Settings = () => {\r\n  return (\r\n    <div style={{ backgroundColor: \"#cad3de\" }}>\r\n      <AppName />\r\n      <div className=\"sm-ml-0 md:ml-8 xl:ml-8 2xl:ml-8 sm:mt-0 md:mt-16 xl:mt-16 2xl:mt-16 sm:p-1 md:p-1 p-1\">\r\n        <img src={ErrorGif} alt={ErrorGif} width=\"100%\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Notifications.js",["115"],"import React from \"react\";\r\nimport {AppName} from \"./AppName\";\r\nimport ErrorPage from \"./ErrorPage.jpg\";\r\nimport ErrorGif from \"./ErrorGif.gif\";\r\n\r\nexport const Notifications = () => {\r\n  return (\r\n    <div style={{ backgroundColor: \"#cad3de\" }}>\r\n      <AppName />\r\n      <div className=\"sm-ml-0 md:ml-8 xl:ml-8 2xl:ml-8 sm:mt-0 md:mt-16 xl:mt-16 2xl:mt-16 sm:p-1 md:p-1 p-1\">\r\n        <img src={ErrorGif} alt={ErrorGif} width=\"100%\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\dashboard\\DashboardOverview.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\IrrigationSchedule.js",["116"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport useAxios from \"axios-hooks\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Preloader from \"../../components/Preloader\";\r\nimport { API_URL } from \"../../api\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSave, faExclamation } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Button, Tooltip, OverlayTrigger } from \"@themesberg/react-bootstrap\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { DateTimePicker, LocalizationProvider } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@material-ui/pickers/adapter/moment\";\r\nimport moment from \"moment\";\r\nimport {AppName} from \"./AppName\";\r\nimport ErrorPage from './ErrorPage.jpg';\r\n\r\nconst DateTimeEditInputCell = (props) => {\r\n  const {id, field, value, api} = props;\r\n  const dateFormat = \"YYYY-MM-DD HH:mm\";\r\n  const handleChange = useCallback((editedDate) => {\r\n    const editedValue = moment(editedDate).format(dateFormat)\r\n    api.setEditCellValue({id, field, value: editedValue})\r\n  }, [id, field,api]);\r\n\r\n  return (\r\n    <LocalizationProvider \r\n      dateAdapter={MomentUtils}\r\n      dateFormat={dateFormat}>\r\n      <div className=\"flex flex-col justify-content-center\">\r\n        <DateTimePicker \r\n          renderInput={props => <TextField {...props} variant=\"outlined\" margin=\"none\" helperText=\"\"></TextField>}\r\n          inputFormat={dateFormat}\r\n          value={new Date(value)}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n\r\nconst sectionColumns = [\r\n  {\r\n    field: \"name\",\r\n    headerName: \"Name\",\r\n    type: \"string\"\r\n  },\r\n  {\r\n    field: \"ec_setpoint\",\r\n    headerName: \"EC Setpoint\",\r\n    type: \"number\", \r\n    editable: true\r\n  },\r\n  {\r\n    field: \"run_time\",\r\n    headerName: \"Run time\",\r\n    type: \"number\"\r\n  },\r\n  {\r\n    field: \"start_time\",\r\n    headerName: \"Start time\",\r\n    type: \"string\", \r\n    renderEditCell: (props) => <DateTimeEditInputCell {...props}/>,\r\n    editable: true\r\n  },\r\n  {\r\n    field: \"end_time\",\r\n    headerName: \"End time\",\r\n    type: \"string\", \r\n    renderEditCell: DateTimeEditInputCell,\r\n    editable: true\r\n  }\r\n].map(column => ({ ...column, flex: 1 }));\r\n\r\nconst SectionTable = ({ section, onChange = null }) => {\r\n  const id = section.sql_index;\r\n  const handleEditCellChangeCommited = useCallback(e => {\r\n    const {field, props: {value}} = e;\r\n    const editedSection = { ...section, [field]: value }\r\n    if (onChange) {\r\n      onChange(editedSection);\r\n    }\r\n  }, [section, onChange])\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <DataGrid\r\n        hideFooter={true} autoHeight rows={[{ id, ...section }]} columns={sectionColumns}\r\n        onEditCellChangeCommitted={handleEditCellChangeCommited} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst fertilizerColumns = [\r\n  {\r\n    field: \"name\",\r\n    headerName: \"Name\",\r\n    type: \"string\"\r\n  },\r\n  {\r\n    field: \"ec_setpoint\",\r\n    headerName: \"EC Setpoint\",\r\n    type: \"number\", \r\n    editable: true\r\n  },\r\n  {\r\n    field: \"flow_rate\",\r\n    headerName: \"Flow rate\",\r\n    type: \"number\", \r\n    editable: true\r\n  },\r\n].map(column => ({ ...column, flex: 1, editable: true }));\r\n\r\nconst FertilizerTable = ({ section, onChange = null }) => {\r\n  const { fertilizer: fertilizers } = section;\r\n  const handleEditCellChangeCommited = useCallback(e => {\r\n    const {id, field, props: {value} } = e;\r\n    const editedFertilizer = { ...fertilizers[id], [field]: value };\r\n    const editedFertilizers = [...fertilizers.slice(0, id), editedFertilizer, ...fertilizers.slice(id + 1)];\r\n    const editedSection = { ...section, fertilizer: editedFertilizers };\r\n    if (onChange) {\r\n      onChange(editedSection);\r\n    }\r\n  }, [section, fertilizers, onChange]);\r\n\r\n  return (\r\n    <>\r\n      <h3\r\n        style={{\r\n          background: \"#a2d2fc\",\r\n          color: \"#4a5073\",\r\n          border: \"1px solid #a2d2fc\",\r\n          borderRadius: \"0.09cm\",\r\n          height: \"3rem\",\r\n          padding: \"0.5rem\",\r\n          fontWeight: \"bold\",\r\n          fontFamily: \"'Rubik', sans-serif\",\r\n          fontSize: \"1.rem\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        Fertilizer\r\n      </h3>\r\n      <DataGrid\r\n        hideFooter={true}\r\n        autoHeight\r\n        rows={fertilizers.map((fertilizer, id) => ({ id: id, ...fertilizer }))}\r\n        columns={fertilizerColumns}\r\n        onEditCellChangeCommitted={handleEditCellChangeCommited}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst SectionRow = ({ section, onChange = null }) => (\r\n  <div\r\n    className=\"w-full p-1\"\r\n    style={{\r\n      border: \"1.5px solid #99a9c4\",\r\n      borderRadius: \"0.1cm\",\r\n      padding: \"1rem\",\r\n      boxShadow: \"3px 3px #5b5c75\",\r\n      marginTop: \"1rem\",\r\n    }}\r\n  >\r\n    <div\r\n      className=\"flex align-items-center align-content-center justify-content-center\"\r\n      style={{\r\n        background: \"#a2d2fc\",\r\n        color: \"#4a5073\",\r\n        fontWeight: \"bold\",\r\n        border: \"1px solid #a2d2fc\",\r\n        borderRadius: \"0.09cm\",\r\n      }}\r\n    >\r\n      <h3\r\n        style={{\r\n          background: \"#a2d2fc\",\r\n          color: \"#4a5073\",\r\n          height: \"3rem\",\r\n          padding: \"0.5rem\",\r\n          fontWeight: \"bold\",\r\n          fontFamily: \"'Rubik', sans-serif\",\r\n          fontSize: \"1.2rem\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {section.name}\r\n      </h3>\r\n    </div>\r\n    <SectionTable section={section} onChange={onChange} />\r\n    <FertilizerTable section={section} onChange={onChange} />\r\n  </div>\r\n);\r\n\r\nexport const IrrigationSchedule = () => {\r\n  const { farmId } = useParams();\r\n  const [{ data, loading, error }] = useAxios(`${API_URL}/-${farmId}/schedule`);\r\n  const [dirty, setDirty] = useState(false);\r\n  const [schedule, setSchedule] = useState();\r\n  useEffect(() => {\r\n    if(data) {\r\n      setSchedule(data);\r\n    }\r\n  }, [data]);\r\n\r\n  const [, postSchedule] = useAxios(\r\n    {\r\n      url: `${API_URL}/-${farmId}/schedule`,\r\n      method: 'POST',\r\n      headers: {\r\n          'content-type': 'application/json',\r\n      },\r\n    },\r\n    {\r\n      manual: true,\r\n    }\r\n  );\r\n\r\n  if (loading || !schedule) return <Preloader />;\r\n  if (error)\r\n    return <img src={ErrorPage} alt={ErrorPage}/>;\r\n\r\n  const handleChange = async (editedSection) => {\r\n    const editedSchedule = schedule.map(section => \r\n      section.sql_index === editedSection.sql_index \r\n      ? editedSection\r\n      : section);\r\n    setDirty(true);\r\n    setSchedule(editedSchedule);\r\n  };\r\n\r\n  const showMessage = (msg) => {\r\n    console.log(msg) // Leave it at this for now\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      showMessage(\"Saving...\");\r\n      await postSchedule({ data: schedule });\r\n      setDirty(false);\r\n    } catch (e) {\r\n      showMessage(\"Failed to save\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#cad3de\" }}>\r\n      <AppName />\r\n        <div className=\"sm-ml-0 md:ml-8 xl:ml-8 2xl:ml-8 sm:mt-0 md:mt-16 xl:mt-16 2xl:mt-16 sm:p-1 md:p-1 p-4\">\r\n          <div\r\n            className=\"flex flex-col align-items-center align-content-center justify-content-center p-1 mt-2\"\r\n            style={{\r\n              dislay: \"flex\",\r\n              background: \"white\",\r\n              border: \"1px solid white\",\r\n              borderRadius: \"0.09cm\",\r\n              fontFamily: \"'Rubik', sans-serif\",\r\n              fontSize: \"1.2rem\",\r\n              color: \"#4a5073\",\r\n            }}\r\n          >\r\n            <OverlayTrigger\r\n              placement=\"bottom\"\r\n              trigger={[\"hover\", \"focus\"]}\r\n              overlay={<Tooltip>Save All settings</Tooltip>}\r\n            >\r\n              <Button className=\"m-0\" onClick={handleSave} disabled={!dirty}>\r\n                <FontAwesomeIcon icon={faSave} /> Save\r\n              </Button>\r\n            </OverlayTrigger>\r\n            {schedule.map((section, i) => {\r\n              return (\r\n                <SectionRow key={i} section={section} onChange={handleChange} />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Pumps.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\Backwash.js",["117","118","119"],"import React from \"react\";\r\nimport { AppName } from \"./AppName\";\r\nimport ErrorPage from \"./ErrorPage.jpg\";\r\nimport { API_URL } from \"../../api\";\r\nimport Preloader from \"../../components/Preloader\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useAxios from \"axios-hooks\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChartLine, faSpa, faTint,faRecycle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n const WashBack = ({ backwash }) => {\r\n   return (\r\n     <div>\r\n       <div className=\"shadow-md border-1 rounded\">\r\n         <div\r\n           style={{\r\n             border: \"1px 1px solid black\",\r\n             display: \"flex\",\r\n             padding: \"1rem\",\r\n             fontFamiliy: \"Times New Roman\",\r\n             fontWeight: \"bold\",\r\n             gap: \"1rem\",\r\n           }}\r\n         >\r\n           <div>\r\n             <h4 style={{ color: \"#4a5073\", fontSize: \"1rem\" }}>\r\n               {backwash.name}\r\n             </h4>\r\n             <h2 style={{ color: \"#4a5073\", fontSize: \"1.5rem\" }}>\r\n               {backwash.status}\r\n             </h2>\r\n             <h2 style={{ color: \"#4a5073\", fontSize: \"0.7rem\" }}>\r\n               {backwash.alarm}\r\n             </h2>\r\n             <div\r\n               style={{\r\n                 color: \"steelblue\",\r\n                 fontSize: \"2rem\",\r\n                 display: \"flex\",\r\n                 justifyContent: \"center\",\r\n                 alignContent: \"center\",\r\n                 alignItems: \"center\",\r\n               }}\r\n             >\r\n               <FontAwesomeIcon icon={faRecycle} />\r\n             </div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n\r\nexport const Backwash = () => {\r\n  const { farmId } = useParams();\r\n const [{ data, loading, error }] = useAxios(`${API_URL}/${farmId}/backwash`);\r\n\r\n if (loading) return <Preloader />;\r\n if (error) return <img src={ErrorPage} alt={ErrorPage}/>;\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#cad3de\" }}>\r\n      <AppName />\r\n      <div className=\"sm-ml-0 md:ml-8 xl:ml-8 2xl:ml-8 sm:mt-0 md:mt-16 xl:mt-16 2xl:mt-16 sm:p-1 md:p-1 p-1\">\r\n        <div className=\"bg-gray-400 rounded shadow-md font-bold text-gray-800 p-2 text-center mt-3\">\r\n          <h1>Alarm Status: {data.backwash_status.status}</h1>\r\n          <h1>\r\n            Percentage Left: {data.backwash_status.percentage_left.toFixed(2)} %\r\n          </h1>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(auto-fit,minmax(15rem, 1fr))\",\r\n            gridGap: \"1rem\",\r\n            marginTop: \"1rem\",\r\n            padding: \"0.8rem\",\r\n          }}\r\n        >\r\n          {data.backwash_valves.map((backwash, i) => (\r\n            <div className=\"bg-gray-400 rounded shadow-md\">\r\n              <WashBack key={i} backwash={backwash} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\AppName.js",["120"],"import React from \"react\";\r\nimport Logo from './Logo.png';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 2,\r\n    display: \"inline-flex\",\r\n  },\r\n}));\r\n\r\nexport const AppName = () => {\r\n    return (\r\n      <div>\r\n        <AppBar className=\"classes.root\" position=\"fixed\">\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              alignContent: \"center\",\r\n              justifyContent: \"center\",\r\n              fontFamily: \"'Noto Sans JP', sans-serif\",\r\n              fontSize: \"3rem\",\r\n              backgroundColor: \"#1e96ff\",\r\n              color: \"white\",\r\n              width: \"100%\",\r\n              padding: \"0.5rem\",\r\n            }}\r\n          >\r\n            <img width={250} src={Logo} alt={Logo} />\r\n          </div>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  };\r\n","C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\BrushChart.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\AxiosSpinner.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\HomeFlowFertilizerBarChart.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\FertilizerBarChart.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\components\\Login.js",[],"C:\\Users\\Grant\\Desktop\\Intelli_Farm_New\\intelli-farm\\src\\pages\\tables\\LineChart.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":11,"column":9,"nodeType":"127","messageId":"128","endLine":11,"endColumn":14},{"ruleId":"125","severity":1,"message":"129","line":4,"column":10,"nodeType":"127","messageId":"128","endLine":4,"endColumn":21},{"ruleId":"125","severity":1,"message":"130","line":4,"column":22,"nodeType":"127","messageId":"128","endLine":4,"endColumn":27},{"ruleId":"125","severity":1,"message":"131","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":17},{"ruleId":"125","severity":1,"message":"131","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":17},{"ruleId":"125","severity":1,"message":"132","line":7,"column":18,"nodeType":"127","messageId":"128","endLine":7,"endColumn":31},{"ruleId":"125","severity":1,"message":"129","line":9,"column":10,"nodeType":"127","messageId":"128","endLine":9,"endColumn":21},{"ruleId":"125","severity":1,"message":"130","line":9,"column":23,"nodeType":"127","messageId":"128","endLine":9,"endColumn":28},{"ruleId":"125","severity":1,"message":"133","line":9,"column":30,"nodeType":"127","messageId":"128","endLine":9,"endColumn":36},{"ruleId":"125","severity":1,"message":"134","line":6,"column":7,"nodeType":"127","messageId":"128","endLine":6,"endColumn":16},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'faChartLine' is defined but never used.","'faSpa' is defined but never used.","'ErrorPage' is defined but never used.","'faExclamation' is defined but never used.","'faTint' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]